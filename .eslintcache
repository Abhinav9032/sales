[{"E:\\material-ui-rhf-validation\\src\\index.js":"1","E:\\material-ui-rhf-validation\\src\\App.js":"2","E:\\material-ui-rhf-validation\\src\\sales\\Sales.js":"3","E:\\material-ui-rhf-validation\\src\\UrlTogglerUtil.js":"4","E:\\material-ui-rhf-validation\\src\\sales\\ViewSales.js":"5","E:\\material-ui-rhf-validation\\src\\sales\\SalesTable.js":"6"},{"size":175,"mtime":1612557144000,"results":"7","hashOfConfig":"8"},{"size":220,"mtime":1645305106719,"results":"9","hashOfConfig":"8"},{"size":30853,"mtime":1645565103799,"results":"10","hashOfConfig":"8"},{"size":229,"mtime":1645451193175,"results":"11","hashOfConfig":"8"},{"size":18738,"mtime":1645538862420,"results":"12","hashOfConfig":"8"},{"size":20162,"mtime":1645565895668,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"925sn6",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\material-ui-rhf-validation\\src\\index.js",[],["28","29"],"E:\\material-ui-rhf-validation\\src\\App.js",[],"E:\\material-ui-rhf-validation\\src\\sales\\Sales.js",["30","31","32","33","34","35"],"E:\\material-ui-rhf-validation\\src\\UrlTogglerUtil.js",[],"E:\\material-ui-rhf-validation\\src\\sales\\ViewSales.js",["36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { TextField, Button, Paper } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport MaterialTable from \"material-table\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CloseTwoToneIcon from \"@material-ui/icons/CloseTwoTone\";\r\nimport axios from \"axios\";\r\nimport { forwardRef } from \"react\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { SERVICE_URL } from \"../UrlTogglerUtil\";\r\nimport moment from \"moment\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  inputField: {\r\n    width: \"100%\",\r\n    margin: theme.spacing(1, 0),\r\n    padding: \"0.5rem\",\r\n    fontSize: \"15px\",\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    top: \"5%\",\r\n    left: \"7%\",\r\n    right: \"7%\",\r\n    bottom: \"10%\",\r\n    height: \"100%\",\r\n    overflow: \"scroll\",\r\n    // display: \"block\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"1px solid black\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\nconst ViewSales = (props) => {\r\n  const classes = useStyles();\r\n  const { setViewSalesVisible, data, salesId } = props;\r\n  const [state, setState] = useState([]);\r\n  const [warehouse, setWarehouse] = useState([]);\r\n  const [pin, setPin] = useState([]);\r\n  const [stateOptions, setStatePotions] = useState([]);\r\n  const [open, setOpen] = React.useState(true);\r\n  const [openDeleteModal, setOpenDeleteModal] = useState(false);\r\n  const [showEditBtn, setShowEditBtn] = useState(false);\r\n  const [showDeleteButton, setShowDeleteBtn] = useState(false);\r\n  const [selectedRowByCheckbox, setSelectedRowByCheckBox] = useState([]);\r\n  const [suceessMessage, setSucessMessage] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(false);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [selectedSalesAllDetails, setSelectedSalesallDetails] = useState([]);\r\n  const [openEditSaleItemModal,setOpenEditSaleItemModal]=useState(false)\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: SERVICE_URL + `/sales/dashboard/getSalesItem/${salesId}`,\r\n    })\r\n      .then((response) => {\r\n        console.log(response);\r\n        setTableData(response.data.salesItems);\r\n        setSelectedSalesallDetails(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n  const tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => (\r\n      <ChevronRight {...props} ref={ref} />\r\n    )),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => (\r\n      <ChevronLeft {...props} ref={ref} />\r\n    )),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => (\r\n      <ArrowDownward {...props} ref={ref} />\r\n    )),\r\n    ThirdStateCheck: forwardRef((props, ref) => (\r\n      <Remove {...props} ref={ref} />\r\n    )),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n  };\r\n  const colums = [\r\n    { title: \"SL.No\", field: \"slNo\" },\r\n    { title: \"CATEGORY\", field: \"category\" },\r\n    {\r\n      title: \"ITEM\",\r\n      field: \"item\",\r\n    },\r\n    { title: \"SUB-ITEM\", field: \"subItem\" },\r\n    { title: \"QUNTITY\", field: \"quantity\" },\r\n    { title: \"UNIT\", field: \"unit\" },\r\n    { title: \"BATCH NO\", field: \"objId\" },\r\n    { title: \"EXP.DATE\", field: \"\" },\r\n    { title: \"PRICE PER UNIT\", field: \"pricePerUnit\" },\r\n    {\r\n      title: \"TOTAL VALUE\",\r\n      field: \"totalValue\",\r\n      type: \"currency\",\r\n      currencySetting: { currencyCode: \"INR\" },\r\n    },\r\n  ];\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setViewSalesVisible(false);\r\n  };\r\n  const handleDeleteRowShowModal = () => {\r\n    setOpenDeleteModal(true);\r\n  };\r\n  const handleDeleteCloseModal = () => {\r\n    setOpenDeleteModal(false);\r\n  };\r\n  const { register, handleSubmit, control, errors } = useForm();\r\n  const handleCheckBoxSelection = (data) => {\r\n    if (data.length > 0) {\r\n      setSelectedRowByCheckBox(data);\r\n      setShowDeleteBtn(true);\r\n    } else {\r\n      setShowDeleteBtn(false);\r\n    }\r\n    if (data.length === 1) {\r\n      setShowEditBtn(true);\r\n    } else {\r\n      setShowEditBtn(false);\r\n    }\r\n  };\r\n  const handleDeleteConfirm = () => {\r\n    console.log(selectedRowByCheckbox);\r\n    const objId = selectedRowByCheckbox.map((i) => i.objId);\r\n    console.log(objId);\r\n    axios({\r\n      method: \"post\",\r\n      url: SERVICE_URL + \"/sales/dashboard/deleteSalesItems\",\r\n      data: {\r\n        objIdList: objId,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        console.log(response);\r\n        const updateSalesTable = tableData.filter(\r\n          (obj1) =>\r\n            !selectedRowByCheckbox.some((obj2) => obj1.objId === obj2.objId)\r\n        );\r\n        setTableData(updateSalesTable);\r\n        setSucessMessage(true);\r\n        setTimeout(() => {\r\n          setSucessMessage(false);\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {})\r\n      .finally(() => {\r\n        setOpenDeleteModal(false);\r\n      });\r\n  };\r\n \r\n  const handleSalesEdit=()=>{\r\n    setOpenEditSaleItemModal(true)\r\n  }\r\n  const handleEditSaleModalClose=()=>{\r\n    setOpenEditSaleItemModal(false)\r\n  }\r\n  const value = (\r\n    <div className={classes.paper}>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          marginBottom: \"0.5rem\",\r\n        }}\r\n      >\r\n        {\" \"}\r\n        <div\r\n          style={{\r\n            fontSize: \"20px\",\r\n            backgroundColor: \"green\",\r\n            marginBottom: \"1rem\",\r\n            color: \"white\",\r\n            padding: \"0.5rem\",\r\n          }}\r\n        >\r\n          About Sales Item\r\n        </div>\r\n        <Button onClick={handleClose} endIcon={<CloseTwoToneIcon />}></Button>\r\n      </div>\r\n      <Paper style={{ padding: \"0.5rem\", marginBottom: \"1rem\" }}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={2}>\r\n            <label>Employee Name</label>\r\n            <input\r\n              variant=\"outlined\"\r\n              value={selectedSalesAllDetails.employeeName}\r\n              readOnly\r\n              fullWidth\r\n              className={classes.inputField}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <label>Employee Code</label>\r\n            <input\r\n              variant=\"outlined\"\r\n              value={selectedSalesAllDetails.employeeCode}\r\n              fullWidth\r\n              className={classes.inputField}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <label>Customer Name</label>\r\n            <input\r\n              value={selectedSalesAllDetails.customerName}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              className={classes.inputField}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <label>Customer Code</label>\r\n            <input\r\n              value={selectedSalesAllDetails.customerCode}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              className={classes.inputField}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <label>Order Id</label>\r\n            <input\r\n              value={selectedSalesAllDetails.salesId}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              className={classes.inputField}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <label>Date</label>\r\n            <input\r\n              value={selectedSalesAllDetails.createdOn}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              className={classes.inputField}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <label>State</label>\r\n            <input\r\n              value={selectedSalesAllDetails.state}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              className={classes.inputField}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <label>Warehouse</label>\r\n            <input\r\n              value={selectedSalesAllDetails.warehouse}\r\n              readOnly\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              className={classes.inputField}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <label>Pin</label>\r\n            <input\r\n              value={selectedSalesAllDetails.pin}\r\n              fullWidth\r\n              className={classes.inputField}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      <Paper style={{ padding: \"0.5rem\" }}>\r\n        <form>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={2}>\r\n              <Autocomplete\r\n                id=\"combo-box-demo\"\r\n                options={stateOptions}\r\n                getOptionLabel={(option) => option.title}\r\n                style={{ width: \"100%\" }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Category\"\r\n                    name=\"category\"\r\n                    inputRef={register({\r\n                      //   required: \"Plese Select Category\",\r\n                    })}\r\n                    // error={Boolean(errors.category)}\r\n                    // helperText={errors.category?.message}\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <Autocomplete\r\n                id=\"combo-box-demo\"\r\n                options={stateOptions}\r\n                getOptionLabel={(option) => option.title}\r\n                style={{ width: \"100%\" }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Item\"\r\n                    name=\"item\"\r\n                    inputRef={register({\r\n                      //   required: \"Plese Select Item\",\r\n                    })}\r\n                    // error={Boolean(errors.item)}\r\n                    // helperText={errors.item?.message}\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <Autocomplete\r\n                id=\"combo-box-demo\"\r\n                options={stateOptions}\r\n                getOptionLabel={(option) => option.title}\r\n                style={{ width: \"100%\" }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Sub-Item\"\r\n                    name=\"subItem\"\r\n                    inputRef={register({\r\n                      //   required: \"Plese Select Sub-Item\",\r\n                    })}\r\n                    // error={Boolean(errors.subItem)}\r\n                    // helperText={errors.subItem?.message}\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                style={{ width: \"100%\" }}\r\n                // onClick={handleFirstSaleBotton}\r\n              >\r\n                APPLY FILTER\r\n              </Button>\r\n            </Grid>\r\n\r\n            {/* <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <Grid item xs={2}>\r\n              <Controller\r\n                render={(props) => (\r\n                  <KeyboardDatePicker\r\n                    disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"MM/dd/yyyy\"\r\n                    margin=\"normal\"\r\n                    label=\"Date From\"\r\n                    value={props.value}\r\n                    onChange={props.onChange}\r\n                    fullWidth\r\n                    //   error={Boolean(errors.poDate)}\r\n                    //   helperText={errors.poDate?.message}\r\n                  />\r\n                )}\r\n                name=\"dateFrom\"\r\n                defaultValue={null}\r\n                control={control}\r\n                rules={\r\n                  {\r\n                    // required: \"Date is required.\",\r\n                  }\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <Controller\r\n                render={(props) => (\r\n                  <KeyboardDatePicker\r\n                    disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"MM/dd/yyyy\"\r\n                    margin=\"normal\"\r\n                    label=\"Date To\"\r\n                    value={props.value}\r\n                    onChange={props.onChange}\r\n                    fullWidth\r\n                    //   error={Boolean(errors.poDate)}\r\n                    //   helperText={errors.poDate?.message}\r\n                  />\r\n                )}\r\n                name=\"dateTo\"\r\n                defaultValue={null}\r\n                control={control}\r\n                rules={\r\n                  {\r\n                    // required: \"Date is required.\",\r\n                  }\r\n                }\r\n              />\r\n            </Grid>\r\n          </MuiPickersUtilsProvider> */}\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n\r\n      <div style={{ padding: \"1rem\", marginTop: \"0rem\", marginBottom: \"1rem\" }}>\r\n        {showDeleteButton && (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            type=\"submit\"\r\n            style={{ width: \"200px\" }}\r\n            onClick={handleDeleteRowShowModal}\r\n          >\r\n            Delete\r\n          </Button>\r\n        )}\r\n        {showEditBtn && (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            style={{ width: \"200px\", marginLeft: \"2rem\" }}\r\n            onClick={handleSalesEdit}\r\n          >\r\n            Edit\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          columns={colums}\r\n          data={tableData}\r\n          title=\"About Sales Items\"\r\n          //   onRowClick={handleRowClick}\r\n          pagi\r\n          options={{\r\n            tableLayout: \"auto\",\r\n            exportButton: true,\r\n            exportFileName: \"File Name\",\r\n            actionsColumnIndex: -1,\r\n            selection: true,\r\n            rowStyle: (data, index) =>\r\n              index % 2 === 0 ? { background: \"#f5f5f5\" } : null,\r\n            headerStyle: { background: \"#c8bbbbd6 \" },\r\n          }}\r\n          onSelectionChange={handleCheckBoxSelection}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Dialog\r\n          open={openDeleteModal}\r\n          onClose={handleDeleteCloseModal}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle style={{ color: \"red\" }} id=\"alert-dialog-title\">\r\n            Delete\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              Are you sure you want to delete ?\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleDeleteCloseModal} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleDeleteConfirm} color=\"primary\" autoFocus>\r\n              Ok\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    </div>\r\n  );\r\n  const editForm=(\r\n      <div>sagar</div>\r\n  )\r\n  return (\r\n    <div style={{ marginLeft: \"10rem\" }}>\r\n      {suceessMessage && (\r\n        <Alert\r\n          style={{ marginTop: \"1rem\", width: \"15rem\", marginRight: \"0.5rem\" }}\r\n          severity=\"success\"\r\n        >\r\n          Sucessfull..!\r\n        </Alert>\r\n      )}\r\n      {errorMessage && (\r\n        <Alert\r\n          style={{ marginTop: \"1rem\", width: \"15rem\", marginRight: \"0.5rem\" }}\r\n          severity=\"error\"\r\n        >\r\n          Failed..!\r\n        </Alert>\r\n      )}\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        className={classes.paper}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n        // style={{ width: \"700px\", height: \"500px\" }}\r\n      >\r\n        {value}\r\n      </Modal>\r\n      <Modal open={openEditSaleItemModal} onClose={handleEditSaleModalClose}>{editForm}</Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewSales;\r\n","E:\\material-ui-rhf-validation\\src\\sales\\SalesTable.js",["55","56","57","58","59","60"],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":79,"column":24,"nodeType":"67","messageId":"68","endLine":79,"endColumn":39},{"ruleId":"69","severity":1,"message":"70","line":195,"column":6,"nodeType":"71","endLine":195,"endColumn":58,"suggestions":"72"},{"ruleId":"69","severity":1,"message":"70","line":218,"column":6,"nodeType":"71","endLine":218,"endColumn":64,"suggestions":"73"},{"ruleId":"69","severity":1,"message":"70","line":233,"column":6,"nodeType":"71","endLine":233,"endColumn":60,"suggestions":"74"},{"ruleId":"69","severity":1,"message":"70","line":249,"column":6,"nodeType":"71","endLine":254,"endColumn":4,"suggestions":"75"},{"ruleId":"69","severity":1,"message":"70","line":265,"column":6,"nodeType":"71","endLine":265,"endColumn":73,"suggestions":"76"},{"ruleId":"65","severity":1,"message":"77","line":7,"column":3,"nodeType":"67","messageId":"68","endLine":7,"endColumn":26},{"ruleId":"65","severity":1,"message":"78","line":8,"column":3,"nodeType":"67","messageId":"68","endLine":8,"endColumn":21},{"ruleId":"65","severity":1,"message":"79","line":12,"column":8,"nodeType":"67","messageId":"68","endLine":12,"endColumn":22},{"ruleId":"65","severity":1,"message":"80","line":36,"column":8,"nodeType":"67","messageId":"68","endLine":36,"endColumn":20},{"ruleId":"65","severity":1,"message":"81","line":39,"column":19,"nodeType":"67","messageId":"68","endLine":39,"endColumn":29},{"ruleId":"65","severity":1,"message":"82","line":41,"column":8,"nodeType":"67","messageId":"68","endLine":41,"endColumn":14},{"ruleId":"65","severity":1,"message":"83","line":66,"column":32,"nodeType":"67","messageId":"68","endLine":66,"endColumn":36},{"ruleId":"65","severity":1,"message":"84","line":67,"column":10,"nodeType":"67","messageId":"68","endLine":67,"endColumn":15},{"ruleId":"65","severity":1,"message":"85","line":67,"column":17,"nodeType":"67","messageId":"68","endLine":67,"endColumn":25},{"ruleId":"65","severity":1,"message":"86","line":68,"column":10,"nodeType":"67","messageId":"68","endLine":68,"endColumn":19},{"ruleId":"65","severity":1,"message":"87","line":68,"column":21,"nodeType":"67","messageId":"68","endLine":68,"endColumn":33},{"ruleId":"65","severity":1,"message":"88","line":69,"column":10,"nodeType":"67","messageId":"68","endLine":69,"endColumn":13},{"ruleId":"65","severity":1,"message":"89","line":69,"column":15,"nodeType":"67","messageId":"68","endLine":69,"endColumn":21},{"ruleId":"65","severity":1,"message":"90","line":70,"column":24,"nodeType":"67","messageId":"68","endLine":70,"endColumn":39},{"ruleId":"65","severity":1,"message":"66","line":77,"column":24,"nodeType":"67","messageId":"68","endLine":77,"endColumn":39},{"ruleId":"69","severity":1,"message":"91","line":94,"column":6,"nodeType":"71","endLine":94,"endColumn":8,"suggestions":"92"},{"ruleId":"65","severity":1,"message":"93","line":152,"column":21,"nodeType":"67","messageId":"68","endLine":152,"endColumn":33},{"ruleId":"65","severity":1,"message":"94","line":152,"column":35,"nodeType":"67","messageId":"68","endLine":152,"endColumn":42},{"ruleId":"65","severity":1,"message":"95","line":152,"column":44,"nodeType":"67","messageId":"68","endLine":152,"endColumn":50},{"ruleId":"65","severity":1,"message":"96","line":1,"column":27,"nodeType":"67","messageId":"68","endLine":1,"endColumn":36},{"ruleId":"65","severity":1,"message":"79","line":16,"column":8,"nodeType":"67","messageId":"68","endLine":16,"endColumn":22},{"ruleId":"65","severity":1,"message":"97","line":51,"column":9,"nodeType":"67","messageId":"68","endLine":51,"endColumn":16},{"ruleId":"65","severity":1,"message":"95","line":52,"column":44,"nodeType":"67","messageId":"68","endLine":52,"endColumn":50},{"ruleId":"65","severity":1,"message":"98","line":56,"column":10,"nodeType":"67","messageId":"68","endLine":56,"endColumn":24},{"ruleId":"65","severity":1,"message":"99","line":56,"column":26,"nodeType":"67","messageId":"68","endLine":56,"endColumn":43},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'setErrorMessage' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formik'. Either include it or remove the dependency array.","ArrayExpression",["102"],["103"],["104"],["105"],["106"],"'MuiPickersUtilsProvider' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'VisibilityIcon' is defined but never used.","'DateFnsUtils' is defined but never used.","'Controller' is defined but never used.","'moment' is defined but never used.","'data' is assigned a value but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'warehouse' is assigned a value but never used.","'setWarehouse' is assigned a value but never used.","'pin' is assigned a value but never used.","'setPin' is assigned a value but never used.","'setStatePotions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'salesId'. Either include it or remove the dependency array.",["107"],"'handleSubmit' is assigned a value but never used.","'control' is assigned a value but never used.","'errors' is assigned a value but never used.","'useEffect' is defined but never used.","'classes' is assigned a value but never used.","'salesTableData' is assigned a value but never used.","'setSalesTableData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [orderMode, firstSaleCustomers, secondSaleCustomers, formik]",{"range":"120","text":"121"},"Update the dependencies array to be: [invDetails, formik.values.category, formik.setFieldValue, formik]",{"range":"122","text":"123"},"Update the dependencies array to be: [invDetails, formik.values.item, formik.setFieldValue, formik]",{"range":"124","text":"125"},"Update the dependencies array to be: [invDetails, formik.values.item, formik.values.subItem, formik.setFieldValue, formik]",{"range":"126","text":"127"},"Update the dependencies array to be: [formik.values.price, formik.values.quantity, formik.setFieldValue, formik]",{"range":"128","text":"129"},"Update the dependencies array to be: [salesId]",{"range":"130","text":"131"},[6651,6703],"[orderMode, firstSaleCustomers, secondSaleCustomers, formik]",[7275,7333],"[invDetails, formik.values.category, formik.setFieldValue, formik]",[7694,7748],"[invDetails, formik.values.item, formik.setFieldValue, formik]",[8134,8232],"[invDetails, formik.values.item, formik.values.subItem, formik.setFieldValue, formik]",[8531,8598],"[formik.values.price, formik.values.quantity, formik.setFieldValue, formik]",[3830,3832],"[salesId]"]